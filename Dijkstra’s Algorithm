#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <climits>

using namespace std;

// Define a graph as an adjacency list
unordered_map<string, vector<pair<string, int>>> graph;

// Function to add an edge to the graph
void addEdge(string u, string v, int weight) {
    graph[u].emplace_back(v, weight);
    graph[v].emplace_back(u, weight);  // Uncomment if you want an undirected graph
}

// Function to set up the graph with hardcoded values
void setupGraph() {
    addEdge("A", "B", 10);
    addEdge("A", "E", 3);
    addEdge("E", "B", 1);
    addEdge("E", "C", 4);
    addEdge("B", "C", 2);
    addEdge("C", "D", 7);
}

// Dijkstra's algorithm implementation
void dijkstra(string start, string end) {
    unordered_map<string, int> distances;
    unordered_map<string, string> previous;
    priority_queue<pair<int, string>, vector<pair<int, string>>, greater<>> pq;

    // Initialize distances to infinity
    for (auto &node : graph) {
        distances[node.first] = INT_MAX;
    }

    // Start node distance is 0
    distances[start] = 0;
    pq.emplace(0, start);

    while (!pq.empty()) {
        auto [currentDistance, currentNode] = pq.top();
        pq.pop();

        if (currentNode == end) break;  // Early exit if we've reached the target

        // Relax edges
        for (auto &[neighbor, weight] : graph[currentNode]) {
            int newDistance = currentDistance + weight;
            if (newDistance < distances[neighbor]) {
                distances[neighbor] = newDistance;
                previous[neighbor] = currentNode;
                pq.emplace(newDistance, neighbor);
            }
        }
    }

    // Output shortest path and distance
    if (distances[end] == INT_MAX) {
        cout << "No path from " << start << " to " << end << endl;
    } else {
        cout << "Shortest path from " << start << " to " << end << " is " << distances[end] << endl;

        // Print the path by tracing back from the end node
        vector<string> path;
        for (string at = end; !at.empty(); at = previous[at]) {
            path.push_back(at);
            if (previous.find(at) == previous.end()) break;
        }

        // Output the path in the correct order
        cout << "Path: ";
        for (auto it = path.rbegin(); it != path.rend(); ++it) {
            cout << *it;
            if (it + 1 != path.rend()) cout << " -> ";
        }
        cout << endl;
    }
}

// Main function to run the program
int main() {
    setupGraph();

    string start, end;
    cout << "Enter the starting node: ";
    cin >> start;
    cout << "Enter the ending node: ";
    cin >> end;

    dijkstra(start, end);

    return 0;
}
